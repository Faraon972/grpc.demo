// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reverse.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Reverse {
  public static class ReverseService
  {
    static readonly string __ServiceName = "reverse.ReverseService";

    static readonly Marshaller<global::Reverse.ReverseRequest> __Marshaller_ReverseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ReverseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Reverse.ReverseReply> __Marshaller_ReverseReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Reverse.ReverseReply.Parser.ParseFrom);

    static readonly Method<global::Reverse.ReverseRequest, global::Reverse.ReverseReply> __Method_ReverseString = new Method<global::Reverse.ReverseRequest, global::Reverse.ReverseReply>(
        MethodType.Unary,
        __ServiceName,
        "ReverseString",
        __Marshaller_ReverseRequest,
        __Marshaller_ReverseReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Reverse.ReverseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReverseService</summary>
    public abstract class ReverseServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Reverse.ReverseReply> ReverseString(global::Reverse.ReverseRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReverseService</summary>
    public class ReverseServiceClient : ClientBase<ReverseServiceClient>
    {
      /// <summary>Creates a new client for ReverseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReverseServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReverseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReverseServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReverseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReverseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Reverse.ReverseReply ReverseString(global::Reverse.ReverseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReverseString(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Reverse.ReverseReply ReverseString(global::Reverse.ReverseRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReverseString, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Reverse.ReverseReply> ReverseStringAsync(global::Reverse.ReverseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReverseStringAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Reverse.ReverseReply> ReverseStringAsync(global::Reverse.ReverseRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReverseString, null, options, request);
      }
      protected override ReverseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReverseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ReverseServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReverseString, serviceImpl.ReverseString).Build();
    }

  }
}
#endregion
